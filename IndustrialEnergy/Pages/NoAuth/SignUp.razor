@page "/SignUp"
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject ToastService toastService

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Signup</h4>
        <div class="card-body">

            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.UserName" class="form-control" />
                    <ValidationMessage For="@(() => model.UserName)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="model.Email" class="form-control" />
                    <ValidationMessage For="@(() => model.Email)" />
                </div>
                <div class="form-group">
                    <label>Firstname</label>
                    <InputText @bind-Value="model.FirstName" class="form-control" />
                    <ValidationMessage For="@(() => model.FirstName)" />
                </div>
                <div class="form-group">
                    <label>Lastname</label>
                    <InputText @bind-Value="model.LastName" class="form-control" />
                    <ValidationMessage For="@(() => model.LastName)" />
                </div>

                <button class="btn btn-primary">
                    SignUp
                </button>

                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }

            </EditForm>
        </div>
    </div>
</div>

@code{
    private User model = new User();
    private string error;

    private bool IsValidToken = false;
    //protected override async Task OnInitializedAsync()
    //{
    //    IsValidToken = await AuthenticationService.IsValidToken();
    //    if (IsValidToken)
    //    {
    //        NavigationManager.NavigateTo("");
    //    }
    //}

    private async void HandleValidSubmit()
    {
        try
        {
            IRestResponse response = await AuthenticationService.SignUp(model);
            ResponseContent responseContent = JsonConvert.DeserializeObject<ResponseContent>(response.Content);

            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {

                error = responseContent.Message;
                model.Password = string.Empty;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            error = "";
            StateHasChanged();
        }

    }


}