@page "/Society"
@inherits SocietyComponentBase
@inject IModalService Modal

@attribute [Authorize]

<h2> My Societies List</h2>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Address</th>
            <th>Contact</th>
            <th>Edit</th>
            <th></th>
            @if (System.User.Role == Role.Admin)
            {
                <th></th>
            }
        </tr>
    </thead>
    <tbody>
        @if (Societies != null)
        {
            @foreach (SocietyModel item in Societies)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Address</td>
                    <td>@item.Contact</td>
                    <td>
                        <button class="btn btn-outline-primary" @onclick="@(() => OpenModal(item))">Edit Society</button>
                    </td>
                    <td>
                        <button class="btn btn-info" @onclick="@(() => ShowInstallation(item.Id))">Show Installation</button>
                    </td>
                    @if (System.User.Role == Role.Admin)
                    {
                        <td>
                            <button class="btn btn-info" @onclick="@(() => AddInstallation(item.Id))">Add Installation</button>
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>
@if (Societies == null || Societies != null && Societies.Count == 0)
{
    <p>No Society Found</p>
}

<button class="btn btn-primary" @onclick="@(() => OpenModal(new SocietyModel()))">Add New Society</button>

@code {

    protected override async Task OnInitializedAsync()
    {
        if (System.User != null)
        {
            await base.OnInitializedAsync();
            await GetAllCurrentSociety();

        }
    }

    async Task OpenModal(SocietyModel society)
    {
        var modalParameter = new ModalParameters();
        modalParameter.Add(nameof(society), society);
        modalParameter.Add(nameof(Societies) + "Modal", Societies);
        string label = society.Id == null ? "Add new Society" : "Update Society";
        var formModal = Modal.Show<SocietyModal>(label, modalParameter);
        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                bool isDelete = result.Data.ToString() == "Deleted";
                if (isDelete)
                {
                    Societies.Remove(society);
                }
                else
                {
                    var res = (SocietyModel)result.Data;
                    if (Societies != null)
                    {
                        if (society.Id == null && society.Name != res.Name)
                        {
                            Societies.Add(res);
                        }
                        else
                        {
                            Societies.RemoveAll(s => s.Id == res.Id);
                            Societies.Add(res);

                        }
                    }
                    StateHasChanged();
                }
            }
        }
    }

    void ShowInstallation(string societyId)
    {
        System.NavigationManager.NavigateTo("installation/" + societyId);
    }

    async Task AddInstallation(string societyId)
    {
        //todo: popup to create Installation
        var modalParameter = new ModalParameters();
        modalParameter.Add("societyId", societyId);
        var formModal = Modal.Show<InstallationCreateModal>("Create Installation", modalParameter);
        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {

                StateHasChanged();

            }
        }
    }
}